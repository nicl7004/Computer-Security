1. With reference to the construction of HMAC, explain how changing the design of the API in
Section 1.2 to use token = HMACuser’s password(user=....) would avoid the length-extension
vulnerability.

This would prevent us from being able to use the password combined with the previous token and message to predict a new password.  If the password is independent of the message and hash (i.e. not concatenated) then the length extension attack is inapplicable.  This new design wouldn’t allow us to recreate the internal state of the hash from the previous token.

We no longer have access to the user’s password, so even if we knew the length of the password we couldn’t seed the hash with the previous state.

2. Briefly explain why the technique you explored in Section 2.2 poses a danger to systems
that rely on digital signatures to verify the integrity of programs before they are installed
or executed. Examples include Microsoft Authenticode and most Linux package managers.
(You may assume that these systems sign MD5 hashes of the programs.)

Because the hashes are public we can craft a program to collide our malicious payload with the hash of the benign expected program and distribute ours as the original.
